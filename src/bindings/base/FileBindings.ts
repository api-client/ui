import { PlatformBindings } from './PlatformBindings.js';
// import { EventTypes } from '../../events/EventTypes.js';

export interface IFileFilter {
  /**
   * An optional description of the category of files types allowed.
   * 
   * @platform web
   * @platform electron
   */
  description?: string;
  /**
   * An Object with the keys set to the MIME type and the values an Array of file extensions.
   * 
   * ```
   * "description": "Images",
   * "accept": {
   *  'image/*': ['.png', '.gif', '.jpeg', '.jpg']
   * }
   * ```
   * 
   * @platform web
   * @platform electron
   */
  accept: Record<string, string[]>;
}

export interface ISaveFileDialogInit {
  /**
   * Only when the platform supports it.
   * The dialog title. Cannot be displayed on some _Linux_ desktop environments.
   */
  title?: string;
  /**
   * Only when the platform supports it.
   * Absolute directory path, absolute file path, or file name to use by default.
   */
  defaultPath?: string;

  /**
   * The list of file filters to apply to the dialog.
   */
  filters?: IFileFilter[];

  /**
   * Default false. By default the picker should include an option to not apply any file type filters. 
   * Setting this option to true means that option is not available.
   * 
   * @platform web
   */
  excludeAcceptAllOption?: boolean;
}

export interface ISaveFileDialogResult {
  /**
   * Whether or not the dialog was canceled.
   */
  canceled: boolean;

  /**
   * If the dialog is canceled, this will be `undefined`.
   * 
   * In **electron** this is the path to the selected file.
   * In the **web** platform this is autogenerated id to the file handle
   * the app should use with the further communication.
   */
  filePath?: string;
}

export interface IOpenFileDialogInit {
  /**
   * Only when the platform supports it.
   * The dialog title. Cannot be displayed on some _Linux_ desktop environments.
   */
  title?: string;
  /**
   * Only when the platform supports it.
   * Absolute directory path, absolute file path, or file name to use by default.
   */
  defaultPath?: string;
  /**
   * The list of file filters to apply to the dialog.
   */
  filters?: IFileFilter[];

  /**
   * Default false. By default the picker should include an option to not apply any file type filters. 
   * Setting this option to true means that option is not available.
   * 
   * @platform web
   */
  excludeAcceptAllOption?: boolean;

  /**
   * When set to true multiple files may be selected.
   * @platform web
   */
  multiple?: boolean;
}

export interface IOpenFileDialogResult {
  /**
   * Whether or not the dialog was canceled.
   */
  canceled: boolean;

  /**
   * If the dialog is cancelled this will be an empty array.
   * 
   * In **electron** this is an array of file paths chosen by the user.
   * In the **web** platform this is autogenerated list of ids to the file handles
   * the app should use with the further communication.
   */
  filePath?: string[];
}

/**
 * The base class for file access bindings.
 */
export abstract class FileBindings extends PlatformBindings {
  async initialize(): Promise<void> {
    // 
  }

  /**
   * Opens a dialog to pick a file to save.
   * 
   * @param opts The dialog configuration.
   */
  abstract saveFileDialog(opts?: ISaveFileDialogInit): Promise<ISaveFileDialogResult>;

  /**
   * Opens a dialog to pick a file for reading.
   * 
   * @param opts The dialog configuration.
   */
  abstract openFileDialog(opts?: IOpenFileDialogInit): Promise<IOpenFileDialogResult>;
}
